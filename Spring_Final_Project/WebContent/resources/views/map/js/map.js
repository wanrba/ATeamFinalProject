function test(){	var marker_picturev = $('#marker_picture').val();	var marker_titlev = $('#marker_title').val();	var marker_contentv = $('#marker_content').val();	var marker_datev = $('#marker_date').val();		if(!marker_picturev){		alert('사진을 등록해주세요')		return false;	}	if(!marker_titlev){		alert('제목을 작성해 주세요')		return false;	}	if(!marker_contentv){		alert('내용을 작성해 주세요')		return false;	}	if(!marker_datev){		alert('날짜를 등록해 주세요')		return false;	}	}function addFile() {	var code = parseInt(document.getElementById("code").value,"10");	var html = "";	for(var i=0; i<code ; i++){		html += "사진 업로드 : <input type=\"file\" name=\"marker_picture\" id=\"marker_picture\" class=\"marker_picture\"><br>";	}	document.getElementById("target").innerHTML = html;}//마커 위도 경도 출력var markerlen = $('.lat').length -1;var Lat = 37.55239056926488var Lon = 126.98061419552607var Level = 11if(markerlen >= 0){	Lat = $('.lat').eq(markerlen).val()	Lon = $('.lon').eq(markerlen).val()	Level = 11}var mapContainer = document.getElementById('map'), // 지도를 표시할 div     mapOption = {			center: new kakao.maps.LatLng(Lat,Lon ), // 지도의 중심좌표		                level: Level // 지도의 확대 레벨    };  var map = new kakao.maps.Map(mapContainer, mapOption); // 지도를 생성합니다            //=======================합치는 부분=========================//지도 확대했을경우 마커 몇개있는지 숫자표시해주는 기능if(markerlen >= 0){	var clusterer = new kakao.maps.MarkerClusterer({		map: map, // 마커들을 클러스터로 관리하고 표시할 지도 객체 		averageCenter: true, // 클러스터에 포함된 마커들의 평균 위치를 클러스터 마커 위치로 설정 		minLevel: 6 // 클러스터 할 최소 지도 레벨 		});   								var piclist1=[];		var datas=[];		for(var i=0; i<$('.lat').length ; i++){			//========picture 여러개 있는 것을 나눠주기========				var picturelist = $('.picture').eq(i).val()			var picturev = picturelist.split(",")						datas.push([$('.lat').eq(i).val(), $('.lon').eq(i).val(), $('.title').eq(i).val(),				$('.content').eq(i).val(),picturev[0],$('.date').eq(i).val(), $('.num').eq(i).val()]);		}			//마커들을 저장할 변수 생성		var markers = [];		for (var i = 0; i < datas.length; i++ ) {			// 지도에 마커를 생성하고 표시한다.			var marker = new kakao.maps.Marker({				position: new kakao.maps.LatLng(datas[i][0], datas[i][1]), // 마커의 좌표				map: map // 마커를 표시할 지도 객체			});			iwPosition = new kakao.maps.LatLng(datas[i][0], datas[i][1]),		    iwRemoveable = true; // removeable 속성을 ture 로 설정하면 인포윈도우를 닫을 수 있는 x버튼이 표시됩니다			// 인포윈도우를 생성하고 지도에 표시합니다 			var infowindow = new kakao.maps.InfoWindow({			    //map: map, // 인포윈도우가 표시될 지도			    position : iwPosition,    //이걸 지우면 처음부터 인포윈도우가 안뜬다!!!!			    content : '<div><img src="resources/fileUpload/' + datas[i][4]+'",height="250px" width="300px"/>'+		        ' </div><div style="background-color:#ffff0029"><br><div>제목::' + datas[i][2]+		        ' </div><br><div style="width:300px">내용::'+datas[i][3]+		        '     </div><br><div>작성일::' + datas[i][5]+		       		        '   <br>     </div>'+		        '  <br><div><input type="button" value="마커삭제" onclick="delMarker('+datas[i][6]+')">'+		        '</div></div>',			    removable : iwRemoveable			});			// 생성된 마커를 마커 저장하는 변수에 넣음			markers.push(marker);					 	// 마커에 mouseover 이벤트와 mouseout 이벤트를 등록합니다		    // 이벤트 리스너로는 클로저를 만들어 등록합니다 		    // for문에서 클로저를 만들어 주지 않으면 마지막 마커에만 이벤트가 등록됩니다		    kakao.maps.event.addListener(marker, 'click', makeOverListener(map, marker, infowindow));		   		// 클러스터러에 마커들을 추가합니다		clusterer.addMarkers(markers);		marker.setDraggable(true); 		//infowindow.close();		}//for문 END 		//인포윈도우를 표시하는 클로저를 만드는 함수입니다  		function makeOverListener(map, marker, infowindow) {		    return function() {		        infowindow.open(map, marker);		    };		}		//마커삭제			function delMarker(marker_num){						$.ajax({			 	url:"markerDel.do?marker_num="+marker_num,			 	type: 'get',			 				 	success: function(data) {				 		alert(data);				 		location.reload();				 	},			 	error: function(e) {			 		console.log("error:"+e);			 		alert("삭제실패!");			 	}			 				 })		}}//===================================================// 지도타입 컨트롤의 지도 또는 스카이뷰 버튼을 클릭하면 호출되어 지도타입을 바꾸는 함수입니다function setMapType(maptype) {     var roadmapControl = document.getElementById('btnRoadmap');    var skyviewControl = document.getElementById('btnSkyview');     if (maptype === 'roadmap') {        map.setMapTypeId(kakao.maps.MapTypeId.ROADMAP);            roadmapControl.className = 'selected_btn';        skyviewControl.className = 'btn';    } else {        map.setMapTypeId(kakao.maps.MapTypeId.HYBRID);            skyviewControl.className = 'selected_btn';        roadmapControl.className = 'btn';    }}// 지도 확대, 축소 컨트롤에서 확대 버튼을 누르면 호출되어 지도를 확대하는 함수입니다function zoomIn() {    map.setLevel(map.getLevel() - 1);}// 지도 확대, 축소 컨트롤에서 축소 버튼을 누르면 호출되어 지도를 확대하는 함수입니다function zoomOut() {    map.setLevel(map.getLevel() + 1);}//===========================지도에 마크 찍기 (위도 경도 가져오기)======================================//===============================// 지도를 클릭한 위치에 표출할 마커입니다var imageSrc = "https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png"; // 마커 이미지의 이미지 크기 입니다var imageSize = new kakao.maps.Size(24, 35); var markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize); var marker1 = new kakao.maps.Marker({	image : markerImage // 마커 이미지 }),infowindow = new kakao.maps.InfoWindow({zindex:1}); // 클릭한 위치에 대한 주소를 표시할 인포윈도우입니다 //주소-좌표 변환 객체를 생성합니다var geocoder = new kakao.maps.services.Geocoder();searchAddrFromCoords(map.getCenter(), displayCenterInfo);// 지도에 마커를 표시합니다//marker.setMap(map);kakao.maps.event.addListener(map, 'rightclick', function(mouseEvent) {   	   	//======위도, 경도로 장소 알아내기==========   	searchDetailAddrFromCoords(mouseEvent.latLng, function(result, status) {       	if (status === kakao.maps.services.Status.OK) {           	var detailAddr = !!result[0].road_address ? '<div>도로명주소 : ' + result[0].road_address.address_name + '</div>' : '';           	detailAddr += '<div>지번 주소 : ' + result[0].address.address_name + '</div>';                      	var content = '<div class="bAddr">' +                           	detailAddr +                        	  '</div>';			           	// 마커를 클릭한 위치에 표시합니다            	marker1.setPosition(mouseEvent.latLng);           	marker1.setMap(map);			           	// 인포윈도우에 클릭한 위치에 대한 법정동 상세 주소정보를 표시합니다           	infowindow.setContent(content);           	infowindow.open(map, marker1);           	if(confirm('생성하시겠습니까?')){	               	//==========end==================               	// 마커 위치를 클릭한 위치로 옮깁니다               	var latlng = mouseEvent.latLng;                	//marker.setPosition(latlng);               	var latitude = latlng.getLat()           		var longitude = latlng.getLng()           		var address = result[0].address.address_name               	$("#marker_lat").val(latitude);               	$("#marker_lon").val(longitude);               	$("#marker_addr").val(address);               	$("#banner_online").fadeIn();       			$("#modal").fadeIn();               };       	}      	});    });//=================레이어창 닫기 ========================$("#close_button").click(function(){        $("#banner_online").fadeOut();        $("#modal").fadeOut();       	$(".marker_picture").each(function(){        	$(this).val('')        });    	$('#marker_title').val('');    	$('#marker_content').val('');    	$('#marker_date').val('');    });//==================키워드로 장소 검색=============================$(function(){	$('#keyword').keypress(function(key){		if(key.keyCode == '13'){			// 장소 검색 객체를 생성합니다			var key_val = $('#keyword').val();			var ps = new kakao.maps.services.Places(); 			// 키워드로 장소를 검색합니다			ps.keywordSearch(key_val, placesSearchCB); 			// 키워드 검색 완료 시 호출되는 콜백함수 입니다			function placesSearchCB (data, status, pagination) {   	 			if (status === kakao.maps.services.Status.OK) {        			// 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해        			// LatLngBounds 객체에 좌표를 추가합니다        			var bounds = new kakao.maps.LatLngBounds();        			for (var i=0; i<data.length; i++) {            			//displayMarker(data[i]);                			bounds.extend(new kakao.maps.LatLng(data[i].y, data[i].x));        			}               			// 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다        			map.setBounds(bounds);    			} 			}		}				});});//=================주소 검색 =======================// 중심 좌표나 확대 수준이 변경됐을 때 지도 중심 좌표에 대한 주소 정보를 표시하도록 이벤트를 등록합니다kakao.maps.event.addListener(map, 'idle', function() {    searchAddrFromCoords(map.getCenter(), displayCenterInfo);});function searchAddrFromCoords(coords, callback) {    // 좌표로 행정동 주소 정보를 요청합니다    geocoder.coord2RegionCode(coords.getLng(), coords.getLat(), callback);         }function searchDetailAddrFromCoords(coords, callback) {    // 좌표로 법정동 상세 주소 정보를 요청합니다    geocoder.coord2Address(coords.getLng(), coords.getLat(), callback);}// 지도 좌측상단에 지도 중심좌표에 대한 주소정보를 표출하는 함수입니다function displayCenterInfo(result, status) {    if (status === kakao.maps.services.Status.OK) {        var infoDiv = document.getElementById('centerAddr');        for(var i = 0; i < result.length; i++) {            // 행정동의 region_type 값은 'H' 이므로            if (result[i].region_type === 'H') {                infoDiv.innerHTML = result[i].address_name;                break;            }        }    }    } 